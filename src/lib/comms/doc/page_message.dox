/// @page page_message_tutorial Messages Tutorial
/// @tableofcontents
/// The communication protocols are all about exchanging @b messages over some
/// I/O link between two or more nodes. This tutorial goes through and explains
/// every stage in defining messages for any custom communication protocol.
/// 
/// @section page_message_tutorial_interface Interface
/// The COMMS library provides comms::Message
/// class that must be a base class for all the custom messages that are going
/// to be implemented. It receives variable number of template parameters, which
/// are expected to be functionality extension options (defined in comms::option
/// namespace). These options define the <b>common interface</b> for all the custom
/// messages.
///
/// In general, all the API functions that are being added to the interface (and described below)
/// use <a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-Virtual_Interface">Non-Virtual Interface</a>
/// idiom:
/// @code
/// class Message
/// {
/// public:
///     void someFunction(...)
///     {
///         ...; // Pre-conditions check and/or other common operations
///         someFunctionImpl(...); // Invocation of polymorphic functionality
///         ...; // Post-conditions check and/or other common operations
///     }
///
/// protected:
///     virtual void someFunctionImpl(...) = 0; // Must be implemented in the derived class
/// };
/// @endcode
/// The polymorphic behaviour is exposed via @b protected virtual functions having
/// the same name, but with @b Impl suffix.
///
/// When defining the common interface class for all the custom protocol messages
/// it is recommended to typedef the comms::Message definition with all the
/// required options:
/// @code
/// typedef comms::Message<.../* Required Options */> MyMessage;
/// @endcode
///
/// If the default interface comms::Message provides is not enough and needs to
/// be extended, then it can easily be done using public inheritance:
/// @code
/// class MyMessage : public comms::Message<...>
/// {
/// public:
///     const char* name() const
///     {
///         return nameImpl();
///     }
///
/// protected:
///     virtual const char* nameImpl() const = 0;
/// };
/// @endcode
///
/// So, let's review all the supported options one by one:
/// 
/// @subsection page_message_tutorial_interface_endian Serialisation Endian
/// Most of the messages carry some kind of payload, which needs to be
/// serialised. Usually the protocol uses the same serialisation endian (Big or Little)
/// for all the data in all the messages. When using comms::Message to
/// define interface for all the messages, it is recommended to specify
/// the serialisation endian using comms::option::BigEndian or 
/// comms::option::LittleEndian options. 
/// @code
/// typedef comms::Message<
///     ...
///     comms::option::BigEndian,
///     ...
/// > MyMessage;
/// @endcode
/// If and only if the endian specification option was used, the
/// comms::Message class defines following internal functions and types. 
/// @code
/// class MyMessage
/// {
/// public:
///     // comms::Field class with the same endian option. 
///     // Can (and should) be provided as a base class to all the
///     // fields.
///     typedef comms::Field<.../* Same endian option*/> Field;
///
/// protected:
///     // Read serialised value of type T from input buffer using proper 
///     // serialisation endian.
///     template <typename T, typename TIter>
///     static T readData(TIter& iter);
/// 
///     // Read serialised value of type T from input buffer using proper 
///     // serialisation endian with number of bytes to read specified by the
///     // template parameter TSize.
///     template <typename T, std::size_t TSize, typename TIter>
///     static T readData(TIter& iter);
///
///     // Serialise value into output buffer using proper serialisation endian.
///     template <typename T, typename TIter>
///     static void writeData(T value, TIter& iter);
///
///     // Serialise value into output buffer using proper serialisation endian
///     // with number of bytes to write specified by the template parameter TSize.
///     template <std::size_t TSize, typename T, typename TIter>
///     static void writeData(T value, TIter& iter);
/// };
/// @endcode
/// Every message interface may define read and/or write functionalities
/// (described later), which will have to be implemented in the custom
/// message class. The @b readData() and @b writeData() static member functions
/// are provided for help in this task. @n
/// Also note, the definition of the @b Field internal type. Later this tutorial
/// will present information on using @b fields to define message payload. The 
/// value of every such @b field needs to be serialised/deserialised. The comms
/// library provides multiple built-in fields that reside in comms::field
/// namespace and described in details in @ref page_field_tutorial page.
/// Almost every such field will require a variant of comms::Field class to be
/// used as the base class. It is alse expected to provide @b readData() and 
/// @b writeData() member functions which can be used to serialise stored value.
/// The internal @b Field type definition inside the
/// @b MyMessage interface class may be used as such.
///  
/// @subsection page_message_tutorial_interface_id_type Type of Message ID
/// Every message must have an ID. Most communication protocols define it
/// as a numeric value that occupies one or two bytes when serialised. The 
/// best and easiest way to define the ID type is by using @b enum with underlying
/// type specification:
/// @code
/// enum MyMsgId : std::uint8_t
/// {
///     MyMsgId_Message1,
///     MyMsgId_Message2,
///     MyMsgId_Message3,
///     ...
/// }; 
/// @endcode
/// When type, that is going to be used to store ID of the message, is defined
/// it should be passed to the definition of the interface using 
/// comms::option::MsgIdType option:
/// @code
/// typedef comms::Message<
///     ...
///     comms::option::MsgIdType<MyMsgId>,
///     ...
/// > MyMessage;
/// @endcode
/// After using such option the interface class (@b MyMessage) defines the 
/// following types and functions:
/// @code
/// class MyMessage
/// {
/// public:
///     // Type of the ID, same as the one passed with comms::option::MsgIdType
///     typedef ... MsgIdType;
///
///     // Type of the ID, when it is passed as a parameter and/or returned from the function:
///     typedef ... MsgIdParamType;
///
///     // API function to retrieve ID of the function
///     MsgIdParamType getId() const
///     {
///         return getIdImpl();
///     }
///
/// protected:
///     virtual MsgIdParamType getIdImpl() const = 0; // Must be implemented in the derived class
/// }
/// @endcode
/// @b Note the existence of @b MsgIdType and @b MsgIdParamType. When the
/// type used for message ID is simple integral one or enum, these types
/// are equal, i.e. the ID is returned "by-value" from getId() function.
/// However, if some other type is used, such as std::string, then @b MsgIdParamType
/// is a const-reference to @b MsgIdType.
///
/// @subsection page_message_tutorial_interface_read Reading Payload (Deserialisation)
/// If the implementation requires reading and processing input messages, the @b read()
/// operation needs to be added to the interface. It is achieved by using 
/// comms::option::ReadIterator option to provide a type of the iterator that
/// is going to be used for reading:
/// @code
/// typedef comms::Message<
///     ...
///     comms::option::ReadIterator<const std::uint8_t*>,
///     ...
/// > MyMessage;
/// @endcode
/// As the result the interface class defines the following types and functions:
/// @code
/// class MyMessage
/// {
/// public:
///     // Type of the the iterator used for reading, the same as provided with
///     // comms::option::ReadIterator option.
///     typedef ... ReadIterator;
///
///     // API function to perform read
///     comms::ErrorStatus read(ReadIterator& iter, std::size_t len)
///     {
///         return readImpl(iter, len);
///     }
///
/// protected:
///     // Must be implemented in the derived class.
///     virtual comms::ErrorStatus readImpl(ReadIterator& iter, std::size_t len) 
///     {
///         return comms::ErrorStatus::NotSupported;
///     }
/// }
/// @endcode
/// Please @b note, that COMMS library doesn't impose any restrictions on
/// how the input data is collected and stored. It is a responsibility of the 
/// @b caller to allocate and maintain the input buffer, while providing only an 
/// iterator for read operation. @n
/// Also @b note, that iterator is passed by reference, which allows advancing 
/// operator when read operation is performed. @n
/// For example:
/// @code
/// typedef std::unique_ptr<MyMessage> MsgPtr;
///
/// MsgPtr msg(new Message1()); // Allocation of some concrete message that
///                             // read functionality in its readImpl().
///
/// std::vector<std::uint8_t> inData = {...}; // Some input data;
/// MyMessage::ReadIterator readIter = &inData[0];
/// auto es = msg->read(readIter, inData.size()); // readIter is advanced in the read operation
/// if (es != comms::ErrorStatus::Success) {
///     ... // Handle error
///     return;
/// }
///
/// ... // Read is successful, handle the message
/// 
/// // Remove consumed bytes from the input buffer
/// auto consumedBytes = std::distance(MyMessage::ReadIterator(&inData[0]), readIter);
/// inData.erase(inData.begin(), inData.begin() + consumedBytes);
/// @endcode
///
/// @subsection page_message_tutorial_interface_write Writing Payload (Serialisation)
/// If the implementation requires serialising messages and sending them over I/O
/// link, the @b write() operation needs to be added to the interface. It is 
/// achieved by using  comms::option::WriteIterator option to provide a type of 
/// the iterator that is going to be used for writing:
/// @code
/// typedef comms::Message<
///     ...
///     comms::option::WriteIterator<std::back_insert_iterator<std::vector<std::uint8_t> > >,
///     ...
/// > MyMessage;
/// @endcode
/// As the result the interface class defines the following types and functions:
/// @code
/// class MyMessage
/// {
/// public:
///     // Type of the the iterator used for writing, the same as provided with
///     // comms::option::WriteIterator option.
///     typedef ... WriteIterator;
///
///     // API function to perform write
///     comms::ErrorStatus write(WriteIterator& iter, std::size_t len)
///     {
///         return writeImpl(iter, len);
///     }
///
/// protected:
///     // Must be implemented in the derived class.
///     virtual comms::ErrorStatus writeImpl(WriteIterator& iter, std::size_t len)
///     {
///         return comms::ErrorStatus::NotSupported;
///     }
/// }
/// @endcode
/// Please @b note, that COMMS library doesn't impose any restrictions on
/// storage type for the output buffer. It is a responsibility of the 
/// @b caller to allocate and maintain the output buffer, while providing only an 
/// iterator for write operation. In the example above the output buffer
/// is chosen to be std::vector<std::uint8_t> and the write operation will
/// be performed using push_back() calls on this vector (due to std::back_insert_iterator
/// being chosen as WriteIterator). @n
/// Also @b note, that iterator is passed by reference, which allows advancing 
/// operator when write operation is performed. @n
/// For example:
/// @code
/// Message1 msg; // Some concrete type of the custom message
/// ...; Update message contents
///
///
/// std::vector<std::uint8_t> outData; // Output buffer
/// MyMessage::WriteIterator writeIter = std::back_inserter(outData);
/// auto es = msg.write(writeIter, outData.max_size()); 
/// if (es != comms::ErrorStatus::Success) {
///     ... // Handle error
///     return;
/// }
///
/// ... // Write is successful, send outData contents over I/O link
/// @endcode
///
/// @subsection page_message_tutorial_interface_handle Dispatch Message for Handling
/// When new data arrives on I/O link, the @ref protocol_stack processes
/// the transport information that wraps the message payload, creates the
/// proper message object, based on the message ID information and returns it
/// wrapped in smart pointer (std::unique_ptr) to @b MyMessage
/// interface class. When such pointer is received by outer processing logic, 
/// appropriate  message handling functionality needs to be executed. Using simple
/// switch statement on message ID (returned by @b getId() interface function)
/// can be very @b INEFFICIENT. The COMMS library provides much more efficient way
/// to dispatch messages to appropriate handler. 
///
/// The handler class needs to be forward declared and passed
/// to the definition of @b MyMessage interface via comms::option::Handler option.
/// @code
/// // Forward declaration
/// class MyHandler;
///
/// typedef comms::Message<
///     ...
///     comms::option::Handler<MyHandler>,
///     ...
/// > MyMessage;
/// @endcode
/// When this option is used the @b MyMessage will define the following interface
/// types and functions:
/// @code
/// class MyMessage
/// {
/// public:
///     // The same type as passed via comms::option::Handler option     
///     typedef ... Handler;
///
///     // Dispatch this message to handler
///     void dispatch(Handler& handler)
///     {
///         dispatchImpl(handler);
///     }
///
/// protected:
///     virtual void dispatchImpl(Handler& handler) = 0; // Must be implemented in the derived class
/// };
/// @endcode
/// More details about dispatching will be provided below in @ref 
/// page_message_tutorial_implementation and @ref page_message_tutorial_implementation_handle
/// sections on this page as well as @ref message_handling section of the
/// main tutorial.
///
/// @subsection page_message_tutorial_interface_length Serialisation Length Retrieval
/// Sometimes it may be needed to know the serialisation length of the message
/// in order to be able to reserve or allocate enough space for output buffer.
/// The COMMS library provides comms::option::LengthInfoInterface option that
/// adds @b length() member function to the interface defined with comms::Message.
/// @code
/// typedef comms::Message<
///     ...
///     comms::option::LengthInfoInterface,
///     ...
/// > MyMessage;
/// @endcode
/// This option adds the following functions to the interface definition:
/// @code
/// class MyMessage
/// {
/// public:
///     // Retrieve the serialisation length
///     std::size_t length() const
///     {
///         return lengthImpl();
///     }
///
/// protected:
///     virtual std::size_t lengthImpl() const = 0; // Must be implemented in the derived class
/// };
/// @endcode
/// Let's add a usage of this function in the example shown in @ref
/// page_message_tutorial_interface_write section to reserve space in the
/// output vector before write takes place:
/// @code
/// void sendMessage(MyMessage& msg)
/// {
///     std::vector<std::uint8_t> outData; // Output buffer
///     outData.reserve(msg.length()); // Avoid possible reallocations during write operation
///     MyMessage::WriteIterator writeIter = std::back_inserter(outData);
///     auto es = msg.write(writeIter, outData.max_size()); 
///     if (es != comms::ErrorStatus::Success) {
///         ... // Handle error
///         return;
///     }
///
///     ... // Write is successful, send outData contents over I/O link
/// }
/// @endcode
///
/// @subsection page_message_tutorial_interface_valid Validity Check
/// Sometimes it may be needed to be able to check whether the message contents
/// (fields) have valid values. The COMMS library provides comms::option::ValidCheckInterface
/// option that adds @b valid() member function to the interface:
/// @code
/// typedef comms::Message<
///     ...
///     comms::option::ValidInfoInterface,
///     ...
/// > MyMessage;
/// @endcode
/// This option adds the following functions to the interface definition:
/// @code
/// class MyMessage
/// {
/// public:
///     // Retrieve the serialisation length
///     bool valid() const
///     {
///         return validImpl();
///     }
///
/// protected:
///     virtual bool validImpl() const
///     {
///         return true; // By default all messages are valid, can be overridden in derived class.
///     }
/// };
/// @endcode
///
/// @subsection page_message_tutorial_interface_refresh Keeping Message Contents in a Consistent State
/// Some communication protocol may define fields that depend on other fields.
/// For example, bits in a bitmask field may be used to define whether some
/// optional fields exist. Or the information about amount of elements in 
/// the list to follow may reside in an independent numeric field. @n 
/// After updating such fields directly, using the interface of the message object,
/// the message contents may end up being in an inconsistent (or invalid) state.
/// There must be a way to normalise the state of the message object. The
/// COMMS library provides comms::option::RefreshInterface option, that adds
/// @b refresh() member function to the message interface.
/// @code
/// typedef comms::Message<
///     ...
///     comms::option::RefreshInterface,
///     ...
/// > MyMessage;
/// @endcode
/// This option adds the following functions to the interface definition:
/// @code
/// class MyMessage
/// {
/// public:
///     // Refresh message contents
///     bool refresh()
///     {
///         return validImpl();
///     }
///
/// protected:
///     virtual bool refreshImpl()
///     {
///         return false;
///     }
/// };
/// @endcode
/// Note, that the @b refresh() member function returns boolean value, which
/// is expected to be "true" in case at least one of the internal fields has
/// been updated, and "false" if message state remains unchanged.@n
/// Also note, that interface provide default implementation of @b readImpl()
/// virtual function. The message object that require proper "refresh" functionality
/// may just override it with proper implementation.
///
/// @subsection page_message_tutorial_interface_summary Interface Options Summary
/// All the options introduced above can be used in any order. They can also
/// be repeated multiple times. However, the option that was defined first takes
/// priority over (or overrides) the same option defined later. @n 
/// For example, the definition below defines @b WriteIterator to be
/// <b>std::uint8_t*</b>, because it was defined with first 
/// comms::option::WriteIterator option:
/// @code
/// typedef comms::Message<
///     ...
///     comms::option::WriteIterator<std::uint8_t*>, 
///     ...
///     comms::option::WriteIterator<std::back_insert_iterator<std::vector<std::uint8_t> >,
///     ...
/// > MyMessage;
/// @endcode  
/// The definition below gives a full interface of all
/// the introduced functions: @b getId(), @b read(), @b write(), @b dispatch(),
/// @b length(), @b valid(), and @b refresh().
/// @code
/// typedef comms::Message<
///     comms::option::BigEndian, // Use big endian for serialisation
///     comms::option::MsgIdType<MyMsgId>, // MyMsgId is an enum type defined earlier
///     comms::option::ReadIterator<const std::uint8_t*>, // Use const std::uint8_t* as iterator for reading
///     comms::option::WriteIterator<std::uint8_t*>, // Use std::uint8_t* as iterator for writing
///     comms::option::Handler<MyHandler>, // My MyHandler class declared earlier as a handler for messages
///     comms::option::LengthInfoInterface, // Add an ability to retrieve serialisation length
///     comms::option::ValidCheckInterface, // Add an ability to check contents validity
///     comms::option::RefreshInterface  // Add an ability to refresh message contents
/// > MyMessage;
/// @endcode
///
/// @section page_message_tutorial_implementation Implementation
/// Now it's time to implement custom messages defined in some custom protocol.
/// Let's call them @b Message1, @b Message2, @b Message3, ...
/// Let's also assume that the required interface is a full one, just like
/// summarised in @ref page_message_tutorial_interface_summary.
/// If we try to implement all the required polymorphic functionality 
/// @b WITHOUT further assistance from COMMS library the implementation will
/// look something like that:
/// @code
/// // Message1 contains 2 values:
/// //   value1 - unsigned value of 2 bytes lenth, valid values range: [0 - 1000]
/// //   value2 - signed value of 1 byte length, all values are valid
/// class Message1 : public MyMessage
/// {
///     typedef MyMessage Base;
///
/// public:
///     typedef std::uint16_t Value1Type;
///     typedef std::int8_t Value2Type;
///
///     Message1() = default;
///     
///     // Accessors for value1:
///     Value1Type& value1() {return m_value1;}
///     const Value1Type& value1() const {return m_value1;}
///
///     // Accessors for value2:
///     Value2Type& value2() {return m_value2;}
///     const Value2Type& value2() const {return m_value2;}
///
/// protected:
///     virtual MsgIdType getIdImpl() const override
///     {
///         return MyMsgId_Message1; // enum value defined earlier
///     }
///
///     virtual comms::ErrorStatus readImpl(ReadIterator& iter, std::size_t len) override
///     {
///         if (len < length()) {
///             return comms::ErrorStatus::NotEnoughData;
///         }
///         
///         // Use readData function defined in comm::Message to deserialise
///         // values using proper (big) endian
///         m_value1 = Base::readData<Value1Type>(iter);
///         m_value2 = Base::readData<Value2Type>(iter);
///         return comms::ErrorStatus::Success;
///     }
///
///     virtual comms::ErrorStatus writeImpl(WriteIterator& iter, std::size_t len) override
///     {
///         if (len < length()) {
///             return comms::ErrorStatus::BufferOverflow;
///         }
///         
///         // Use writeData function defined in comm::Message to serialise
///         // values using proper (big) endian.
///         Base::writeData(m_value1, iter);
///         Base::writeData(m_value2, iter);
///         return comms::ErrorStatus::Success;
///     }
///
///     virtual void dispatchImpl(Handler& handler) override
///     {
///         handler.handle(*this);
///     }
///
///     virtual std::size_t lengthImpl() const override
///     {
///         return sizeof(Value1Type) + sizeof(Value2Type);
///     }
///
///     virtual bool validImpl() const override
///     {
///         return (0 <= m_value1) && (m_value1 <= 1000); // Check only value1, value2 is always valid
///     }
///
/// private:
///     Value1Type m_value1 = 0;
///     Value2Type m_value2 = 0;
/// }
/// @endcode
/// Please pay attention to the following details in the example above.
/// @li The body of @b getIdImpl() message of every message is more or less
///     the same, returning numeric ID of the message being implemented.
/// @li Usually every message will have some internal payload data @b fields.
///     This fields can be accessed via the interface accessors. The @b read()
///     operation is reading all the fields. The @b write() operation is
///     writing all the fields. The @b length() information is a summary of
///     serialisation lengths of all the fields. The message is @b valid()
///     if all the internal fields are valid.
/// @li If the handler interface defines the interface shown below, then
///     the body of @b dispatchImpl() function of every message is the same.
///     @code
///     class MyHandler
///     {
///     public:
///         void handle(Message1& msg) {...}
///         void handle(Message2& msg) {...}
///         void handle(Message3& msg) {...}
///         ...
///     };
///     @endcode
///     The invocation <b>"handler.handle(*this);"</b> in the body of @b handleImpl()
///     function will invoke proper <b>"handle(...)"</b> function based on the message
///     type being implemented.
///
/// It all looks more or less the same for most of the messages. The COMMS
/// library can provide the specified default implementation for all of these
/// virtual functions that will suite most of the cases. All you need to 
/// do is inherit from comms::MessageBase class and provide appropriate
/// options to specify what implementation is required. @n
/// For example,
/// @code
/// typedef MyMessage::Field CommonFieldBase;
///
/// typedef std::tuple <
///     comms::field::IntValue<CommonFieldBase, std::uint16_t, comms::option::ValidNumValueRange<0, 1000> >,
///     comms::field::IntValue<CommonFieldBase, std::int8_t>
/// > Message1Fields;
///
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::StaticNumIdImpl<MyMsgId_Message1>, // Will implement getIdImpl()
///         comms::option::MsgType<Message1>, // Provide type of actual message class, will implement dispatchImpl()
///         comms::option::FieldsImpl<Message1Fields> // Will implement readImpl(), writeImpl(), 
///                                                   // lengthImpl(), validImpl()
///     >
/// {
/// };
/// @endcode
/// Before diving into details of every possible implementation option, please
/// pay attention to several details. @n
/// The comms::MessageBase base class implements all the required pure virtual
/// functions. No extra work in the @b Message1 class definition is required, unless
/// @b MyMessage interface has defined extra pure virtual functions (such as name
/// message name retrieval) that need to be implemented to be able to instantiate
/// @b Message1 object.
///
/// The first template parameter to comms::MessageBase class is the common
/// interface class to all the messages. The comms::MessageBase base publicly inherit
/// from this class. As the result the full class inheritance graph may look
/// like this:
/// @diafile message_class_hierarchy.dia
/// @n
/// The concrete message type @b Message1 inherits from comms::MessageBase <...>
/// which inherits from common @b MyMessage interface class, which may inherit
/// from (or simply typedef instead) comms::Message <...>.
///
/// Also note, that the fields of the message are defined using separate classes
/// defined in comms::field namespace. These classes provide a common interface
/// to read, write, check serialisation length, and check validity of the
/// field's value. These common interfaces are used to implement the default
/// behaviour of reading, writing, serialisation length calculation, and validity
/// check of the message itself. You may refer to @ref page_field_tutorial page
/// for a full tutorial on the existing fields provided by the COMMS library.
///
/// Now, let's review all the available options one by one
///
/// @subsection page_message_tutorial_implementation_id Implementing Retrieval of Message ID
/// If the message has a numeric ID that is known at compile time, it is possible
/// to provide comms::option::StaticNumIdImpl option with this ID value to 
/// comms::MessageBase class, which will implement @b getIdImpl() virtual function
/// for you.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::StaticNumIdImpl<MyMsgId_Message1>, // Will implement getIdImpl()
///         ...
///     >
/// {
///     ...
/// };
/// @endcode
///
/// Sometimes it may be useful to use dummy message objects that expose the
/// same interface as all other message, but are not part of the protocol 
/// being implemented. In other words, they don't have any ID and the 
/// @b getId() member function is not supposed to ever be called. For such
/// cases COMMS library provides comms::option::NoIdImpl option.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::NoIdImpl, // Will implement getIdImpl()
///         ...
///     >
/// {
///     ...
/// };
/// @endcode
/// In this case the implementation of @b "getIdImpl()" will try to fail using
/// GASSERT() macro and return default constructed value of @b MyMessage::MsgIdType type.
/// 
/// @subsection page_message_tutorial_implementation_handle Implementing Dispatching to Handler
/// Dispatching to the handler, requires knowledge about actual type of the message,
/// which needs to be provided using comms::option::MsgType options.
/// If the option is used, the comms::MessageBase class may automatically provide 
/// implementation of @b dispatchImpl() virtual member function. The 
/// implementation will invoke proper @b handle(...) member function of the
/// handler class. 
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::MsgType<Message1>
///         ...
///     >
/// {
///     ...
/// };
/// @endcode
/// Please note, that in addition to knowing the actual message type (provided
/// using comms::option::MsgType option), the comms::MessageBase class must
/// have a knowledge about actual type of the Handler class (provided using
/// comms::option::Handler option to the comms::Message interface class,
/// see @ref page_message_tutorial_interface_handle). If proper handler class
/// wasn't provided, the comms::MessageBase class won't implement any
/// @b dispatchImpl virtual function even though the actual message type 
/// was provided using comms::option::MsgType option.
///
/// The handler class is expected to define @b handle(...) member function
/// for every possible message type it is expected to handle:
/// @code
/// class MyHandler
/// {
/// public:
///     void handle(Message1& msg) {...}
///     void handle(Message2& msg) {...}
///     void handle(Message3& msg) {...}
///     ...
/// };
/// @endcode
/// Please refer to @ref message_handling section in the main tutorial for more
/// details on the handler.
///
/// @subsection page_message_tutorial_implementation_fields Implementing Fields Related Functionality
/// As was specified earlier, when the types of the fields are known, 
/// in most cases the implementation of read, write, 
/// length calculation, and validity check functionalities is pretty straightforward
/// and can be automatically generated.
/// It is performing read, write, summarising reported lengths of, and checking
/// validity of all the data fields, the message contains.
/// 
/// The COMMS library provides multiple types of fields, which are defined
/// in comms::field namespace. Please refer to @ref page_field_tutorial page
/// for full tutorial on fields.
///
/// The usage of comms::option::FieldsImpl with all the relevant fields (bundled
/// in std::tuple), provided as a template argument to the option, may provide
/// the default implementation of @b readImpl(), @b writeImpl(), @b lengthImpl(), and
/// @b validImpl() functions.
/// @code
/// typedef MyMessage::Field CommonFieldBase;
///
/// typedef std::tuple <
///     comms::field::IntValue<CommonFieldBase, std::uint16_t, comms::option::ValidNumValueRange<0, 1000> >,
///     comms::field::IntValue<CommonFieldBase, std::int8_t>
/// > Message1Fields;
///
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, // May implement readImpl(), writeImpl(), 
///                                                    // lengthImpl(), validImpl()
///         ...
///     >
/// {
/// };
/// @endcode
/// 
/// Just using comms::option::FieldsImpl option is equivalent to having
/// the following types and functions:
/// @code
/// typedef MyMessage::Field CommonFieldBase;
///
/// typedef std::tuple <
///     comms::field::IntValue<CommonFieldBase, std::uint16_t, comms::option::ValidNumValueRange<0, 1000> >,
///     comms::field::IntValue<CommonFieldBase, std::int8_t>
/// > Message1Fields;
///
/// class Message1
/// {
/// public:
///     typedef Message1Fields AllFields;
///     
///     AllFields& fields()
///     {
///         return fields_;
///     }
///
///     const AllFields& fields() const
///     {
///         return fields_;
///     }
///
///     // Default implementation of read functionality
///     template <typename TIter>
///     comms::ErrorStatus doRead(TIter& iter, std::size_t size);
///
///     // Default implementation of write functionality
///     template <typename TIter>
///     comms::ErrorStatus doWrite(TIter& iter, std::size_t size) const;
///
///     // Default implementation of validity check functionality
///     bool doValid() const;
///
///     // Default implementation of length calculation functionality
///     std::size_t doLength() const;
///
/// protected:
///     // readImpl() exists only if ReadIterator is known (was provided using comms::option::ReadIterator)
///     virtual comms::ErrorStatus readImpl(ReadIterator& iter, std::size_t size) override
///     {
///         return doRead(iter, size);
///     }
///
///     // writeImpl() exists only if WriteIterator is known (was provided using comms::option::WriteIterator)
///     virtual comms::ErrorStatus writeImpl(WriteIterator& iter, std::size_t size) const override
///     {
///         return doWrite(iter, size);
///     }
///
///     // lengthImpl() exists only if comms::option::LengthInfoInterface option was provided to comms::Message
///     virtual std::size_t lengthImpl() const override
///     {
///         return doLength();
///     }
///
///     // validImpl() exists only if comms::option::ValidInfoInterface option was provided to comms::Message
///     virtual bool validImpl() const override
///     {
///         return doValid();
///     }
/// private:
///     AllFields fields_;        
/// };
/// @endcode
/// @b NOTE, that comms::MessageBase class override virtual @b readImpl(),
/// @b writeImpl(), @b lengthImpl(), and @b validImpl() functions if appropriate
/// option was passed to comms::Message class when defining the interface. If
/// some option was NOT provided (for example comms::option::ValidInfoInterface
/// was NOT used), then appropriate @b *Impl function (@b validImpl() in this case)
/// won't be implemented.
///
/// Also @b NOTE, that the usage of comms::option::FieldsImpl provides the accessor functions to
/// the tuple of the fields to be able to access the fields themselves. @n For 
/// example, when the dispatch takes place and appropriate @b handle() member function
/// of the handler is invoked, the fields can be accessed in the following way:
/// @code
/// class MyHandler
/// {
/// public:
///     void handle(Message1& msg) 
///     {
///         auto& fields = msg.fields(); // Reference to std::tuple containing all the fields
///         auto& value1Field = std::get<0>(fields); // Reference to the first field
///         auto& value2Field = std::get<1>(fields); // Reference to the second field
///
///         auto value1 = value1Field.value(); // Internal value of the first field - std::uint16_t
///         auto value2 = value2Field.value(); // Internal value of the first field - std::int8_t
///         ... // Use the values
///     }
///     ...
/// };
/// @endcode
///
/// @subsubsection page_message_tutorial_implementation_fields_read Custom Read Functionality
/// Sometimes, the default read functionality provided by comms::MessageBase 
/// may be incorrect. For example, some bit in one of the fields may indicate
/// whether other fields exist or are missing. In this case the actual message
/// class needs to provide its own custom read functionality. It needs to reside
/// in public non-virtual @b doRead() member function and 
/// comms::option::MsgType option needs to be provided to comms::MessageBase
/// to specify the actual message type.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::MsgType<Message1>
///         ...
///     >
/// {
/// public:
///     template <typename TIter>
///     comms::ErrorStatus doRead(TIter& iter, std::size_t len)
///     {
///         ... // custom read is here.
///     }
/// };
/// @endcode
/// When comms::option::MsgType option is provided to comms::MessageBase class to
/// specify the actual message type, it
/// causes the following implementation of @b readImpl() member function.
/// @code
/// namespace comms
/// {
/// class MessageBase<...>
/// {
/// protected:
///     virtual ErrorCode readImpl(ReadIterator& iter, std::size_t len) override
///     {
///         static_cast<Message1*>(this)->doRead(iter, len);
///     }
/// }
/// } // namespace comms
/// @endcode
/// As the result, if custom message class implements its own @b doRead() 
/// function, it will be invoked from @b readImpl(). If not, the inherited 
/// default implementation of comms::MessageBase::doRead will be used.
///
/// @subsubsection page_message_tutorial_implementation_fields_no_read No Read Functionality
/// Sometimes the defined message is not expected to be received, and it may
/// be unnecessary to generate appropriate @b readImpl() function to save a code
/// space. In this case, comms::option::NoReadImpl option may be
/// passed to comms::MessageBase in addition to comms::option::FieldsImpl.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::NoReadImpl,
///         ...
///     >
/// {
/// };
/// @endcode
/// In this case the body of @b readImpl() remains to be what comms::Message defined, i.e.
/// @code
/// virtual comms::ErrorStatus readImpl(ReadIterator& iter, std::size_t len)
/// {
///     return comms::ErrorStatus::NotSupported;
/// }
/// @endcode
///
/// @subsubsection page_message_tutorial_implementation_fields_write Custom Write Functionality
/// Similar to read, sometimes the default write functionality provided by comms::MessageBase 
/// may be incorrect and may require custom, message specific, write implementation. 
/// In this case the actual message needs to define
/// public non-virtual @b doWrite() member function as well as use
/// comms::option::MsgType option to specify actual message type.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::MsgType<Message1>
///         ...
///     >
/// {
/// public:
///     template <typename TIter>
///     comms::ErrorStatus doWrite(TIter& iter, std::size_t len) const
///     {
///         ... // custom write is here.
///     }
/// };
/// @endcode
/// In the same way as with @ref page_message_tutorial_implementation_fields_read, the
/// body of @b writeImpl will look like:
/// @code
/// namespace comms
/// {
/// class MessageBase<...>
/// {
/// protected:
///     virtual ErrorCode writeImpl(WriteIterator& iter, std::size_t len) const override
///     {
///         static_cast<Message1*>(this)->doWrite(iter, len);
///     }
/// }
/// } // namespace comms
/// @endcode
/// If the actual message class defines its own @b doWrite member function, it
/// will be chosen instead of default comms::MessageBase::doWrite.
///
/// @subsubsection page_message_tutorial_implementation_fields_no_write No Write Functionality
/// Sometimes the defined message is not expected to be sent, and it may
/// be unnecessary to generate appropriate @b writeImpl() function to save a code
/// space. In this case, comms::option::NoWriteImpl option may be
/// passed to comms::MessageBase in addition to comms::option::FieldsImpl.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::NoWriteImpl,
///         ...
///     >
/// {
/// };
/// @endcode
/// In this case the body of @b writeImpl() remains to be what comms::Message defined, i.e.
/// @code
/// virtual comms::ErrorStatus writeImpl(WriteIterator& iter, std::size_t len) const
/// {
///     return comms::ErrorStatus::NotSupported;
/// }
/// @endcode
///
///
/// @subsubsection page_message_tutorial_implementation_fields_length Custom Length Calculation
/// Sometimes the default length calculation functionality provided by comms::MessageBase 
/// may be incorrect and may require custom, message specific, length calculation implementation. 
/// In this case the actual message needs to define
/// public non-virtual @b doLength() member function and use
/// comms::option::MsgType option specifying the actual message type.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::MsgType<Message1>
///         ...
///     >
/// {
/// public:
///     std::size_t doLength() const
///     {
///         ... // custom length calculation is here.
///     }
/// };
/// @endcode
/// If the @b doLength() function exists it will be invoked from @b lengthImpl()
/// instead of default comms::MessageBase::doLength().
///
/// @subsubsection page_message_tutorial_implementation_fields_no_length No Length Calculation
/// In the very similar way to @ref page_message_tutorial_implementation_fields_no_read
/// and @ref page_message_tutorial_implementation_fields_no_write, the overriding
/// @b lengthImpl() function may be inhibited using comms::option::NoLengthImpl
/// option.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::NoLenthImpl
///         ...
///     >
/// {
/// };
/// @endcode
///
/// @subsubsection page_message_tutorial_implementation_fields_valid Custom Validity Check
/// Sometimes the default validity check functionality provided by comms::MessageBase 
/// may be incorrect or incomplete and may require custom, message specific, validity check implementation. 
/// In this case the actual message needs to define
/// public non-virtual @b doValid() member function and use
/// comms::option::MsgType option specifying the actual message type.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::MsgType<Message1>
///         ...
///     >
/// {
/// public:
///     bool doValid() const
///     {
///         ... // custom validity check is here.
///     }
/// };
/// @endcode
/// If the @b doValid() function exists it will be invoked from @b validImpl()
/// instead of default comms::MessageBase::doValid().
///
/// @subsubsection page_message_tutorial_implementation_fields_no_valid No Validity Check
/// In the very similar way to @ref page_message_tutorial_implementation_fields_no_read
/// and @ref page_message_tutorial_implementation_fields_no_write, the overriding
/// @b validImpl() function may be inhibited using comms::option::NoValidImpl
/// option.
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::NoValidImpl
///         ...
///     >
/// {
/// };
/// @endcode
///
/// @subsubsection page_message_tutorial_implementation_fields_refresh Custom Refresh
/// The default the @b refreshImpl() function is provided by comms::Message
/// interface class (see @ref page_message_tutorial_interface_refresh). It does 
/// nothing and always returns @b false, indicating that no field has been changed. 
/// However, the custom message may require custom refresh functionality. To force the
/// comms::MessageBase class to implement proper @b refreshImpl() virtual function,
/// the actual message class needs to implement public non-virtual 
/// @b doRefresh() member function, provide actual message type using 
/// comms::option::MsgType option, and also use comms::option::HasDoRefresh
/// option to notify the comms::MessageBase about existence of custom @b doRefresh()
/// function:
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>, 
///         comms::option::MsgType<Message1>
///         comms::option::HasDoRefresh,
///         ...
///     >
/// {
/// public:
///     bool doRefresh()
///     {
///         ... // custom refresh functionality is here.
///     }
/// };
/// @endcode
///
/// @subsection page_message_tutorial_impl_access Accessing the Fields
/// The comms::MessageBase class provides access to its fields via
/// comms::MessageBase::fields() member function(s). The fields are bundled
/// into <a href="http://en.cppreference.com/w/cpp/utility/tuple">std::tuple</a>
/// and can be accessed using indices with
/// <a href="http://en.cppreference.com/w/cpp/utility/tuple/get">std::get</a>.
/// For convenience, the fields should be named. The COMMS_MSG_FIELDS_ACCESS()
/// macro does exactly that when used inside the custom message definition class. 
/// @code
/// class Message1 : public
///     comms::MessageBase<
///         MyMessage, // Interface class for all the messages
///         comms::option::FieldsImpl<Message1Fields>,
///         ...
///     >
/// {
///     typedef comms::MessageBase<MyMessage, comms::option::FieldsImpl<Message1Fields>, ...> Base;
/// public:
///     COMMS_MSG_FIELDS_ACCESS(Base, name1, name2);
///     ...
/// };
/// @endcode
///
/// The usage of the COMMS_MSG_FIELDS_ACCESS() macro with type of the base
/// class (a variant of comms::MessageBase with comms::option::FieldsImpl option)
/// as the first parameter followed by the list of the field's names
/// is equivalent to having the following definitions inside the message class
/// @code
/// class Message1 : public comms::MessageBase<...>
/// {
/// public:
///     enum FieldIdx {
///         FieldIdx_name1,
///         FieldIdx_name2,
///         FieldIdx_nameOfValues
///     };
///
///     static_assert(std::tuple_size<Base::AllFields>::value == FieldIdx_nameOfValues,
///         "Number of expected fields is incorrect");
///
///     struct FieldsAsStruct
///     {
///         Field1& name1;
///         Field2& name2;
///     };
///
///     struct ConstFieldsAsStruct
///     {
///         const Field1& name1;
///         const Field2& name2;
///     };
///
///     FieldsAsStruct fieldsAsStruct()
///     {
///         return FieldsAsStruct{
///             std::get<0>(Base::fields()),
///             std::get<1>(Base::fields())};
///     }
///
///     ConstFieldsAsStruct fieldsAsStruct() const
///     {
///         return ConstFieldsAsStruct{
///             std::get<0>(Base::fields()),
///             std::get<1>(Base::fields())};
///     }
/// };
/// @endcode
/// @b NOTE, that provided names @b name1, and @b name2, have
/// found their way to the enum @b FieldIdx and as data members of the
/// @b FieldsAsStruct and @b ConstFieldsAsStruct structs. @n
/// Also note, that there is automatically added @b FieldIdx_nameOfValues
/// value to the end of @b FieldIdx enum.
///
/// As the result, the fields can be accessed using @b FieldIdx enum
/// @code
/// void handle(Message1& msg)
/// {
///     auto& allFields = msg.fields();
///     auto& field1 = std::get<MyMessage::FieldIdx_name1>(allFields);
///     auto& field2 = std::get<MyMessage::FieldIdx_name2>(allFields);
///
///     auto value1 = field1.value();
///     auto value2 = field2.value();
/// }
/// @endcode
/// or using provided struct(s):
/// @code
/// void handle(Message1& msg)
/// {
///     auto allFields = msg.fieldsAsStruct();
///
///     auto value1 = allFields.name1.value();
///     auto value2 = allFields.name2.value();
/// }
/// @endcode
///
