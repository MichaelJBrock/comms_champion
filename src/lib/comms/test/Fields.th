//
// Copyright 2013-2015 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


#include <cstdint>
#include <algorithm>
#include <limits>
#include <memory>
#include <iterator>
#include <type_traits>

#include "comms/comms.h"
#include "cxxtest/TestSuite.h"


class FieldsTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
    void test24();
    void test25();
    void test26();
    void test27();
    void test28();
    void test29();
    void test30();

private:
    typedef comms::option::BigEndian BigEndianOpt;
    typedef comms::option::LittleEndian LittleEndianOpt;

    enum Enum1 {
        Enum1_Value1,
        Enum1_Value2,
        Enum1_Value3,
        Enum1_NumOfValues
    };

    enum class Enum2 : unsigned {
        Value1,
        Value2,
        Value3,
        Value4,
        NumOfValues
    };


    template <typename TField>
    static TField readWriteField(
        const char* buf,
        std::size_t size,
        comms::ErrorStatus expectedStatus = comms::ErrorStatus::Success);

    template <typename TField>
    void writeReadField(
        const TField& field,
        const char* expectedBuf,
        std::size_t size,
        comms::ErrorStatus expectedStatus = comms::ErrorStatus::Success);
};

void FieldsTestSuite::test1()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint32_t> Field;

    static const char Buf[] = {
        0x01, 0x02, 0x03, 0x04
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), sizeof(std::uint32_t));
    TS_ASSERT_EQUALS(field.getValue(), 0x01020304);
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test2()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint32_t,
        comms::option::FixedLength<3>
    > Field;

    static const char Buf[] = {
        0x01, 0x02, 0x03, 0x04
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 3);
    TS_ASSERT_EQUALS(field.getValue(), 0x010203);
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test3()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::int16_t
    > Field;

    static const char Buf[] = {
        0x01, 0x02
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), sizeof(std::int16_t));
    TS_ASSERT_EQUALS(field.getValue(), static_cast<std::int16_t>(0x0102));
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test4()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::int16_t
    > Field;

    static const char Buf[] = {
        (char)0xff, (char)0xff
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), sizeof(std::int16_t));
    TS_ASSERT_EQUALS(field.getValue(), -1);
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test5()
{
    typedef comms::field::IntValue<
        comms::Field<LittleEndianOpt>,
        std::int16_t
    > Field;

    static const char Buf[] = {
        0x0, (char)0x80
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), sizeof(std::int16_t));
    TS_ASSERT_EQUALS(field.getValue(), std::numeric_limits<std::int16_t>::min());
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test6()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::int16_t,
        comms::option::FixedLength<1>
    > Field;

    static const char Buf[] = {
        (char)0xff, 0x00
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 1);
    TS_ASSERT_EQUALS(field.getValue(), -1);
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test7()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::int16_t,
        comms::option::FixedLength<1>,
        comms::option::NumValueSerOffset<-2000>
    > Field;

    static const char Buf[] = {
        13
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);

    TS_ASSERT_EQUALS(field.length(), 1);
    TS_ASSERT_EQUALS(field.getValue(), 2013);
    TS_ASSERT(field.valid());

    field.setValue(2000);
    static const char ExpectedBuf[] = {
        0
    };
    const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);

    field.setValue(2000 + 0xff);
    static const char ExpectedBuf2[] = {
        (char)0xff
    };
    const std::size_t ExpectedBufSize2 = std::extent<decltype(ExpectedBuf2)>::value;
    writeReadField(field, ExpectedBuf2, ExpectedBufSize2);
}

void FieldsTestSuite::test8()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint32_t,
        comms::option::FixedLength<3>,
        comms::option::ValidNumValueRange<0, 0x010200>
    > Field;

    Field field;
    TS_ASSERT(field.valid());
    TS_ASSERT_EQUALS(field.getValue(), 0U);
    field.setValue(0x010200);
    TS_ASSERT_EQUALS(field.getValue(), 0x010200);
    TS_ASSERT(field.valid());

    static const char Buf[] = {
        0x01, 0x02, 0x03, 0x04
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 3);
    TS_ASSERT_EQUALS(field.getValue(), 0x010203);
    TS_ASSERT(!field.valid());
}

void FieldsTestSuite::test9()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint8_t,
        comms::option::ValidNumValueRange<0, 10>,
        comms::option::DefaultNumValue<100>
    > Field;

    Field field;
    TS_ASSERT_EQUALS(field.getValue(), 100);
    TS_ASSERT(!field.valid());

    static const char Buf[] = {
        0x05, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 1);
    TS_ASSERT_EQUALS(field.getValue(), 0x05);
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test10()
{
    typedef comms::field::BitmaskValue<
        comms::Field<BigEndianOpt>,
        comms::option::FixedLength<2>
    > Field;

    Field field;
    TS_ASSERT(field.valid());
    TS_ASSERT_EQUALS(field.getValue(), 0U);

    static const char Buf[] = {
        (char)0xde, (char)0xad,
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 2);
    TS_ASSERT_EQUALS(field.getValue(), 0xdead);
    TS_ASSERT_EQUALS(field.getBitValue(0U), true);
    TS_ASSERT_EQUALS(field.getBitValue(1U), false);
    TS_ASSERT_EQUALS(field.getBitValue(2U), true);
    TS_ASSERT_EQUALS(field.getBitValue(3U), true);
    TS_ASSERT_EQUALS(field.getBitValue(4U), false);
    TS_ASSERT_EQUALS(field.getBitValue(5U), true);
    TS_ASSERT_EQUALS(field.getBitValue(6U), false);
    TS_ASSERT_EQUALS(field.getBitValue(7U), true);
    TS_ASSERT_EQUALS(field.getBitValue(8U), false);
    TS_ASSERT_EQUALS(field.getBitValue(9U), true);
    TS_ASSERT_EQUALS(field.getBitValue(10U), true);
    TS_ASSERT_EQUALS(field.getBitValue(11U), true);
    TS_ASSERT_EQUALS(field.getBitValue(12U), true);
    TS_ASSERT_EQUALS(field.getBitValue(13U), false);
    TS_ASSERT_EQUALS(field.getBitValue(14U), true);
    TS_ASSERT_EQUALS(field.getBitValue(15U), true);

    field.setBitValue(1U, true);
    TS_ASSERT_EQUALS(field.getValue(), 0xdeaf);

    field.setBits(0x2);
    TS_ASSERT_EQUALS(field.getValue(), 0xdeaf);
    TS_ASSERT(field.valid());

    static const char ExpectedBuf[] = {
        (char)0xde, (char)0xaf
    };
    const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);
}

void FieldsTestSuite::test11()
{
    typedef comms::field::BitmaskValue<
        comms::Field<LittleEndianOpt>,
        comms::option::FixedLength<3>,
        comms::option::DefaultNumValue<0xffffff>,
        comms::option::BitmaskReservedBits<0xff0000, 0>
    > Field;

    Field field;
    TS_ASSERT(!field.valid());
    TS_ASSERT_EQUALS(field.getValue(), 0xffffff);

    static const char Buf[] = {
        (char)0xde, (char)0xad, (char)0x00, (char)0xff
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 3);
    TS_ASSERT_EQUALS(field.getValue(), 0xadde);
    TS_ASSERT(field.valid());
    TS_ASSERT_EQUALS(field.getBitValue(0U), false);
    TS_ASSERT_EQUALS(field.getBitValue(1U), true);
    TS_ASSERT_EQUALS(field.getBitValue(2U), true);
    TS_ASSERT_EQUALS(field.getBitValue(3U), true);
    TS_ASSERT_EQUALS(field.getBitValue(4U), true);
    TS_ASSERT_EQUALS(field.getBitValue(5U), false);
    TS_ASSERT_EQUALS(field.getBitValue(6U), true);
    TS_ASSERT_EQUALS(field.getBitValue(7U), true);
    TS_ASSERT_EQUALS(field.getBitValue(8U), true);
    TS_ASSERT_EQUALS(field.getBitValue(9U), false);
    TS_ASSERT_EQUALS(field.getBitValue(10U), true);
    TS_ASSERT_EQUALS(field.getBitValue(11U), true);
    TS_ASSERT_EQUALS(field.getBitValue(12U), false);
    TS_ASSERT_EQUALS(field.getBitValue(13U), true);
    TS_ASSERT_EQUALS(field.getBitValue(14U), false);
    TS_ASSERT_EQUALS(field.getBitValue(15U), true);
    TS_ASSERT_EQUALS(field.getBitValue(16U), false);
    TS_ASSERT_EQUALS(field.getBitValue(17U), false);
    TS_ASSERT_EQUALS(field.getBitValue(18U), false);
    TS_ASSERT_EQUALS(field.getBitValue(19U), false);
    TS_ASSERT_EQUALS(field.getBitValue(20U), false);
    TS_ASSERT_EQUALS(field.getBitValue(21U), false);
    TS_ASSERT_EQUALS(field.getBitValue(22U), false);
    TS_ASSERT_EQUALS(field.getBitValue(23U), false);

    field.setBits(0x10000);
    TS_ASSERT_EQUALS(field.getValue(), 0x1adde);
    TS_ASSERT(!field.valid());

    field.setBitValue(0U, true);
    TS_ASSERT_EQUALS(field.getValue(), 0x1addf);
    field.setBitValue(16U, false);
    TS_ASSERT_EQUALS(field.getValue(), 0xaddf);
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test12()
{
    typedef comms::field::EnumValue<
        comms::Field<BigEndianOpt>,
        Enum1,
        comms::option::FixedLength<1>,
        comms::option::ValidNumValueRange<0, Enum1_NumOfValues - 1>,
        comms::option::DefaultNumValue<Enum1_NumOfValues>
    > Field;

    Field field;
    TS_ASSERT(!field.valid());
    TS_ASSERT_EQUALS(field.getValue(), Enum1_NumOfValues);

    static const char Buf[] = {
        (char)Enum1_Value1, (char)0x3f
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 1);
    TS_ASSERT_EQUALS(field.getValue(), Enum1_Value1);
    TS_ASSERT(field.valid());

    field.setValue(Enum1_NumOfValues);
    TS_ASSERT(!field.valid());
    field.setValue(Enum1_Value2);

    static const char ExpectedBuf[] = {
        (char)Enum1_Value2
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);
}

void FieldsTestSuite::test13()
{
    typedef comms::field::EnumValue<
        comms::Field<BigEndianOpt>,
        Enum2,
        comms::option::FixedLength<2>,
        comms::option::ValidNumValueRange<0, (int)(Enum2::NumOfValues) - 1>,
        comms::option::DefaultNumValue<(int)Enum2::NumOfValues>
    > Field;

    Field field;
    TS_ASSERT(!field.valid());
    TS_ASSERT_EQUALS(field.getValue(), Enum2::NumOfValues);

    static const char Buf[] = {
        0x0, (char)Enum2::Value4, (char)0x3f
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 2);

    TS_ASSERT_EQUALS(field.getValue(), Enum2::Value4);
    TS_ASSERT(field.valid());

    field.setValue(Enum2::NumOfValues);
    TS_ASSERT(!field.valid());
    field.setValue(Enum2::Value3);

    static const char ExpectedBuf[] = {
        0x0, (char)Enum2::Value3
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);
}

void FieldsTestSuite::test14()
{
    typedef comms::field::VarSizeArray<
        comms::Field<BigEndianOpt>,
        comms::field::IntValue<
            comms::Field<BigEndianOpt>,
            std::uint8_t
        >
    > Field;

    Field field;
    TS_ASSERT(field.valid());

    static const char Buf[] = {
        0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), BufSize);
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test15()
{
    typedef comms::field::VarSizeArray<
        comms::Field<BigEndianOpt>,
        comms::field::IntValue<
            comms::Field<BigEndianOpt>,
            std::uint8_t
        >,
        comms::option::FixedSizeStorage<32>
    > Field;

    Field field;
    TS_ASSERT(field.valid());

    static const char Buf[] = {
        0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), BufSize);
    TS_ASSERT(field.valid());

    static const char Buf2[] = {
        0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc
    };
    static const std::size_t BufSize2 = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf2, BufSize2);
    TS_ASSERT_EQUALS(field.length(), BufSize2);
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test16()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint8_t
    > SizeField;

    typedef comms::field::String<
        comms::Field<BigEndianOpt>,
        SizeField
    > Field;

    typedef comms::field::String<
        comms::Field<BigEndianOpt>,
        SizeField,
        comms::option::FixedSizeStorage<256>
    > StaticStorageField;

    Field field;
    TS_ASSERT(field.valid());
    TS_ASSERT(field.empty());

    StaticStorageField staticStorageField;
    TS_ASSERT(staticStorageField.valid());
    TS_ASSERT(staticStorageField.empty());

    static const char ExpectedBuf[] = {
        0x0
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);
    writeReadField(staticStorageField, ExpectedBuf, ExpectedBufSize);

    static const char Buf[] = {
        0x5, 'h', 'e', 'l', 'l', 'o', 'g', 'a', 'r'
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.size(), static_cast<std::size_t>(Buf[0]));
    TS_ASSERT_EQUALS(field.length(), field.size() + 1U);
    TS_ASSERT(field.valid());

    staticStorageField = readWriteField<StaticStorageField>(Buf, BufSize);
    TS_ASSERT_EQUALS(staticStorageField.size(), static_cast<std::size_t>(Buf[0]));
    TS_ASSERT_EQUALS(staticStorageField.length(), staticStorageField.size() + 1U);
    TS_ASSERT(staticStorageField.valid());
}

void FieldsTestSuite::test17()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint8_t,
        comms::option::ValidNumValueRange<0, 4>
    > SizeField;

    typedef comms::field::String<
        comms::Field<BigEndianOpt>,
        SizeField
    > Field;

    typedef comms::field::String<
        comms::Field<BigEndianOpt>,
        SizeField,
        comms::option::FixedSizeStorage<256>
    > StaticStorageField;

    Field field;
    TS_ASSERT(field.valid());
    TS_ASSERT(field.empty());

    StaticStorageField staticStorageField;
    TS_ASSERT(staticStorageField.valid());
    TS_ASSERT(staticStorageField.empty());


    static const char Buf[] = {
        0x5, 'h', 'e', 'l', 'l', 'o', 'g', 'a', 'r'
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.size(), static_cast<std::size_t>(Buf[0]));
    TS_ASSERT_EQUALS(field.length(), field.size() + 1U);
    TS_ASSERT(!field.valid());
    TS_ASSERT_EQUALS(field.getValue(), "hello");

    staticStorageField = readWriteField<StaticStorageField>(Buf, BufSize);
    TS_ASSERT_EQUALS(staticStorageField.size(), static_cast<std::size_t>(Buf[0]));
    TS_ASSERT_EQUALS(staticStorageField.length(), field.size() + 1U);
    TS_ASSERT(!staticStorageField.valid());
    TS_ASSERT_EQUALS(staticStorageField.getValue(), "hello");
}

struct HelloInitialiser
{
    template <typename TField>
    void operator()(TField&& field)
    {
        field.setValue("hello");
    }
};

void FieldsTestSuite::test18()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint16_t
    > SizeField;

    typedef comms::field::String<
        comms::Field<BigEndianOpt>,
        SizeField,
        comms::option::DefaultValueInitialiser<HelloInitialiser>
    > Field;

    typedef comms::field::String<
        comms::Field<BigEndianOpt>,
        SizeField,
        comms::option::DefaultValueInitialiser<HelloInitialiser>,
        comms::option::FixedSizeStorage<64>
    > StaticStorageField;

    Field field;
    TS_ASSERT(field.valid());
    TS_ASSERT(!field.empty());
    TS_ASSERT_EQUALS(field.getValue(), "hello");
    field.clear();
    TS_ASSERT(field.empty());
    field.setValue("bla");
    TS_ASSERT_EQUALS(field.getValue(), "bla");
    TS_ASSERT_EQUALS(field.size(), 3);
    TS_ASSERT_EQUALS(field.length(), 5);

    StaticStorageField staticStorageField;
    TS_ASSERT(staticStorageField.valid());
    TS_ASSERT(!staticStorageField.empty());
    TS_ASSERT_EQUALS(staticStorageField.getValue(), "hello");
    staticStorageField.clear();
    TS_ASSERT(staticStorageField.empty());
    staticStorageField.setValue("bla");
    TS_ASSERT_EQUALS(staticStorageField.getValue(), "bla");
    TS_ASSERT_EQUALS(staticStorageField.size(), 3);
    TS_ASSERT_EQUALS(staticStorageField.length(), 5);

    static const char ExpectedBuf[] = {
        0x0, 0x3, 'b', 'l', 'a'
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);
    writeReadField(staticStorageField, ExpectedBuf, ExpectedBufSize);
}

void FieldsTestSuite::test19()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint8_t
    > SizeField;

    typedef comms::field::String<
        comms::Field<BigEndianOpt>,
        SizeField
    > Field;

    typedef comms::field::String<
        comms::Field<BigEndianOpt>,
        SizeField,
        comms::option::FixedSizeStorage<64>
    > StaticStorageField;

    Field field;
    TS_ASSERT(field.valid());
    TS_ASSERT(field.empty());

    StaticStorageField staticStorageField;
    TS_ASSERT(staticStorageField.valid());
    TS_ASSERT(staticStorageField.empty());

    static const std::string Str("hello");
    std::copy(Str.begin(), Str.end(), std::back_inserter(field));
    TS_ASSERT(!field.empty());
    TS_ASSERT_EQUALS(field.size(), Str.size());
    TS_ASSERT_EQUALS(field.getValue(), Str);

    std::copy(Str.begin(), Str.end(), std::back_inserter(staticStorageField));
    TS_ASSERT(!staticStorageField.empty());
    TS_ASSERT_EQUALS(staticStorageField.size(), Str.size());
    TS_ASSERT_EQUALS(staticStorageField.getValue(), Str.c_str());

    static const char ExpectedBuf[] = {
        0x5, 'h', 'e', 'l', 'l', 'o'
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);
    writeReadField(staticStorageField, ExpectedBuf, ExpectedBufSize);
}

void FieldsTestSuite::test20()
{
    typedef comms::field::IntValue<
        comms::Field<LittleEndianOpt>,
        std::uint16_t,
        comms::option::VarLength<1, 2>
    > Field;

    static const char Buf[] = {
        (char)0x81, 0x01
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 2U);
    TS_ASSERT_EQUALS(field.getValue(), static_cast<std::uint16_t>(0x81));
    TS_ASSERT(field.valid());

    field.setValue(0x7ff);
    TS_ASSERT_EQUALS(field.length(), 2U);
    static const char ExpectedBuf[] = {
        (char)0xff, 0x0f
    };

    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);
}

void FieldsTestSuite::test21()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint32_t,
        comms::option::VarLength<1, 3>
    > Field;

    static const char Buf[] = {
        (char)0x83, 0x0f
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 2U);
    TS_ASSERT_EQUALS(field.getValue(), static_cast<std::uint32_t>(0x18f));
    TS_ASSERT(field.valid());

    field.setValue(0x7ff);
    TS_ASSERT_EQUALS(field.length(), 2U);
    static const char ExpectedBuf[] = {
        (char)0x8f, (char)0x7f
    };

    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);

    field.setValue(0x7f);
    TS_ASSERT_EQUALS(field.length(), 1U);
    TS_ASSERT_EQUALS(field.getValue(), 0x7f);
    static const char ExpectedBuf2[] = {
        (char)0x7f
    };

    static const std::size_t ExpectedBufSize2 = std::extent<decltype(ExpectedBuf2)>::value;
    writeReadField(field, ExpectedBuf2, ExpectedBufSize2);

    static const char Buf2[] = {
        (char)0x91, (char)0xc2, (char)0x3f, (char)0xff
    };
    static const std::size_t BufSize2 = std::extent<decltype(Buf2)>::value;
    field = readWriteField<Field>(Buf2, BufSize2);
    TS_ASSERT_EQUALS(field.length(), 3U);
    TS_ASSERT_EQUALS(field.getValue(), static_cast<std::uint32_t>(0x4613f));
    TS_ASSERT(field.valid());
}

void FieldsTestSuite::test22()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        std::uint32_t,
        comms::option::VarLength<1, 3>
    > Field;

    static const char Buf[] = {
        (char)0x83, (char)0x8f, (char)0x8c, (char)0x3f, (char)0xff
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto field = readWriteField<Field>(Buf, BufSize, comms::ErrorStatus::ProtocolError);
    static_cast<void>(field);
}

void FieldsTestSuite::test23()
{
    typedef comms::field::IntValue<
        comms::Field<LittleEndianOpt>,
        std::int16_t,
        comms::option::VarLength<1, 2>
    > Field;

    Field field;

    field.setValue(static_cast<int16_t>(0xe000));
    TS_ASSERT_EQUALS(field.length(), 2U);

    static const char ExpectedMinValueBuf[] = {
        (char)0x80, (char)0x40
    };

    static const std::size_t ExpectedMinValueBufSize = std::extent<decltype(ExpectedMinValueBuf)>::value;
    writeReadField(field, ExpectedMinValueBuf, ExpectedMinValueBufSize);

    field.setValue(0x1fff);
    TS_ASSERT_EQUALS(field.length(), 2U);

    static const char ExpectedMaxValueBuf[] = {
        (char)0xff, (char)0x3f
    };

    static const std::size_t ExpectedMaxValueBufSize = std::extent<decltype(ExpectedMaxValueBuf)>::value;
    writeReadField(field, ExpectedMaxValueBuf, ExpectedMaxValueBufSize);
}

void FieldsTestSuite::test24()
{
    typedef comms::field::IntValue<
        comms::Field<BigEndianOpt>,
        unsigned,
        comms::option::FixedLength<2>,
        comms::option::NumValueSerOffset<2>,
        comms::option::ValidNumValueRange<0, 2> > Field;

    static const char Buf[] = {
        0x00, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    Field field = readWriteField<Field>(Buf, BufSize);
    TS_ASSERT_EQUALS(field.length(), 2);
    TS_ASSERT_EQUALS(field.getValue(), 0x0);
    TS_ASSERT(field.valid());
    field.setValue(3);
    TS_ASSERT(!field.valid());

    static const char ExpectedBuf[] = {
        0x00, 0x05
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    writeReadField(field, ExpectedBuf, ExpectedBufSize);
}

void FieldsTestSuite::test25()
{
    typedef std::tuple<
        comms::field::IntValue<
            comms::Field<BigEndianOpt>,
            std::uint8_t,
            comms::option::FixedBitLength<2>
        >,
        comms::field::BitmaskValue<
            comms::Field<BigEndianOpt>,
            comms::option::FixedLength<1>,
            comms::option::FixedBitLength<6>
        >
    > BitfileMembers;

    typedef comms::field::Bitfield<
        comms::Field<BigEndianOpt>,
        BitfileMembers> Field;

    Field field;
    static_cast<void>(field);
    TS_ASSERT_EQUALS(field.length(), 1U);
    TS_ASSERT_EQUALS(field.memberBitLength<0>(), 2U);
    TS_ASSERT_EQUALS(field.memberBitLength<1>(), 6U);

    static const char Buf[] = {
        (char)0x41, (char)0xff
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    field = readWriteField<Field>(Buf, BufSize);
    auto& members = field.members();
    auto& mem1 = std::get<0>(members);
    TS_ASSERT_EQUALS(mem1.getValue(), 0x1);

    auto& mem2 = std::get<1>(members);
    TS_ASSERT_EQUALS(mem2.getValue(), 0x10);
}

void FieldsTestSuite::test26()
{
    typedef std::tuple<
        comms::field::IntValue<
            comms::Field<BigEndianOpt>,
            std::uint8_t,
            comms::option::FixedBitLength<3>
        >,
        comms::field::BitmaskValue<
            comms::Field<BigEndianOpt>,
            comms::option::FixedLength<1>,
            comms::option::FixedBitLength<5>
        >
    > BitfileMembers;

    typedef comms::field::Bitfield<
        comms::Field<BigEndianOpt>,
        BitfileMembers
    > Field;

    Field field;
    static_cast<void>(field);
    TS_ASSERT_EQUALS(field.length(), 1U);
    TS_ASSERT_EQUALS(field.memberBitLength<0>(), 3U);
    TS_ASSERT_EQUALS(field.memberBitLength<1>(), 5U);

    static const char Buf[] = {
        (char)0x09, (char)0xff
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    field = readWriteField<Field>(Buf, BufSize);
    auto& members = field.members();
    auto& mem1 = std::get<0>(members);
    TS_ASSERT_EQUALS(mem1.getValue(), 0x1);

    auto& mem2 = std::get<1>(members);
    TS_ASSERT_EQUALS(mem2.getValue(), 0x1);
}

void FieldsTestSuite::test27()
{
    typedef std::tuple<
        comms::field::IntValue<
            comms::Field<BigEndianOpt>,
            std::uint8_t,
            comms::option::FixedBitLength<4>
        >,
        comms::field::BitmaskValue<
            comms::Field<BigEndianOpt>,
            comms::option::FixedLength<1>,
            comms::option::FixedBitLength<8>
        >,
        comms::field::EnumValue<
            comms::Field<BigEndianOpt>,
            Enum1,
            comms::option::FixedBitLength<4>
        >

    > BitfileMembers;

    typedef comms::field::Bitfield<
        comms::Field<BigEndianOpt>,
        BitfileMembers
    > Field;

    Field field;
    static_cast<void>(field);
    TS_ASSERT_EQUALS(field.length(), 2U);
    TS_ASSERT_EQUALS(field.memberBitLength<0>(), 4U);
    TS_ASSERT_EQUALS(field.memberBitLength<1>(), 8U);
    TS_ASSERT_EQUALS(field.memberBitLength<2>(), 4U);

    static const char Buf[] = {
        (char)0x4f, (char)0xa1, (char)0xaa
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    field = readWriteField<Field>(Buf, BufSize);
    auto& members = field.members();
    auto& mem1 = std::get<0>(members);
    TS_ASSERT_EQUALS(mem1.getValue(), 0x1);

    auto& mem2 = std::get<1>(members);
    TS_ASSERT_EQUALS(mem2.getValue(), 0xfa);

    auto& mem3 = std::get<2>(members);
    TS_ASSERT_EQUALS(mem3.getValue(), 0x4);
}

void FieldsTestSuite::test28()
{
//    typedef comms::field::ComplexIntValue<
//        comms::Field<BigEndianOpt>,
//        std::uint16_t,
//        comms::option::DefaultNumValue<0x7>,
//        comms::option::ValidNumValueRange<0x7, 0x7>,
//        comms::option::InvalidValueBehaviour<comms::traits::behaviour::Fail>
//    > Field;
//
//
//    Field field;
//    TS_ASSERT(field.valid());
//    TS_ASSERT_EQUALS(field.getValue(), 0x7);
//
//    static const char Buf[] = {
//        0x00, 0x0f
//    };
//
//    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
//    const auto* readIter = &Buf[0];
//    auto es = field.read(readIter, BufSize);
//    TS_ASSERT_EQUALS(es, comms::ErrorStatus::ProtocolError);
//    TS_ASSERT_EQUALS(field.getValue(), 0x7);
//    TS_ASSERT(field.valid());
//
//    static const char Buf2[] = {
//        0x00, 0x07, (char)0xff
//    };
//
//    static const std::size_t BufSize2 = std::extent<decltype(Buf2)>::value;
//    readIter = &Buf2[0];
//    es = field.read(readIter, BufSize2);
//    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
//    TS_ASSERT_EQUALS(field.getValue(), 0x7);
//    TS_ASSERT(field.valid());
//
//
//    TS_ASSERT_EQUALS(field.minValue(), 0U);
//    TS_ASSERT_EQUALS(field.maxValue(), std::numeric_limits<std::uint16_t>::max());
}

void FieldsTestSuite::test29()
{
//    typedef comms::field::EnumValue<
//        comms::Field<BigEndianOpt>,
//        Enum1,
//        comms::option::FixedLength<2>,
//        comms::option::ValidNumValueRange<0, Enum1_NumOfValues - 1>,
//        comms::option::DefaultNumValue<Enum1_Value2>,
//        comms::option::InvalidValueBehaviour<comms::traits::behaviour::Fail>
//    > Field;
//
//    Field field;
//    TS_ASSERT(field.valid());
//    TS_ASSERT_EQUALS(field.getValue(), Enum1_Value2);
//
//    static const char Buf[] = {
//        0x0, (char)Enum1_Value1, (char)0x3f
//    };
//    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
//    field = readWriteField<Field>(Buf, BufSize);
//    TS_ASSERT_EQUALS(field.length(), 2);
//    TS_ASSERT_EQUALS(field.getValue(), Enum1_Value1);
//    TS_ASSERT(field.valid());
//
//    static const char Buf2[] = {
//        0x0, (char)Enum1_NumOfValues, (char)0x3f
//    };
//    static const std::size_t BufSize2 = std::extent<decltype(Buf2)>::value;
//    readWriteField<Field>(Buf2, BufSize2, comms::ErrorStatus::ProtocolError);
//
//    field.setValue(Enum1_Value3);
//    TS_ASSERT(field.valid());
//
//    static const char ExpectedBuf[] = {
//        0x0, (char)Enum1_Value3
//    };
//    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
//    writeReadField(field, ExpectedBuf, ExpectedBufSize);
//
//    TS_ASSERT_EQUALS(field.minValue(), 0U);
//    TS_ASSERT_EQUALS(field.maxValue(), 0xffff);
}

void FieldsTestSuite::test30()
{
//    typedef comms::field::ComplexIntValue<
//        comms::Field<BigEndianOpt>,
//        std::uint8_t,
//        comms::option::DefaultNumValue<0x2>,
//        comms::option::ValidNumValueRange<0x2, 0x2>,
//        comms::option::InvalidValueBehaviour<comms::traits::behaviour::IgnoreValue>
//    > Field;
//
//    Field field;
//    TS_ASSERT(field.valid());
//    TS_ASSERT_EQUALS(field.getValue(), 0x2);
//
//    static const char Buf[] = {
//        0x0f
//    };
//
//    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
//    const auto* readIter = &Buf[0];
//    auto es = field.read(readIter, BufSize);
//    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
//    TS_ASSERT_EQUALS(field.getValue(), 0x2);
//    TS_ASSERT(field.valid());
//
//    static const char Buf2[] = {
//        0x00, 0x02, (char)0xff
//    };
//
//    static const std::size_t BufSize2 = std::extent<decltype(Buf2)>::value;
//    readIter = &Buf2[0];
//    es = field.read(readIter, BufSize2);
//    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
//    TS_ASSERT_EQUALS(field.getValue(), 0x2);
//    TS_ASSERT(field.valid());
//
//    TS_ASSERT_EQUALS(field.minValue(), 0U);
//    TS_ASSERT_EQUALS(field.maxValue(), std::numeric_limits<std::uint8_t>::max());
}

template <typename TField>
TField FieldsTestSuite::readWriteField(
    const char* buf,
    std::size_t size,
    comms::ErrorStatus expectedStatus)
{
    typedef TField Field;
    Field field;

    auto iter = buf;
    auto status = field.read(iter, size);
    TS_ASSERT_EQUALS(status, expectedStatus);

    if (status != comms::ErrorStatus::Success) {
        return field;
    }

    auto diff = static_cast<std::size_t>(std::distance(buf, iter));
    TS_ASSERT_EQUALS(field.length(), diff);

    std::unique_ptr<char[]> outDataBuf(new char[diff]);
    auto writeIter = &outDataBuf[0];

    status = field.write(writeIter, diff);
    TS_ASSERT_EQUALS(status, comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));

    auto writeDiff = static_cast<std::size_t>(std::distance(&outDataBuf[0], writeIter));
    TS_ASSERT_EQUALS(field.length(), writeDiff);
    TS_ASSERT_EQUALS(diff, writeDiff);
    return field;
}

template <typename TField>
void FieldsTestSuite::writeReadField(
    const TField& field,
    const char* expectedBuf,
    std::size_t size,
    comms::ErrorStatus expectedStatus)
{
    std::unique_ptr<char[]> outDataBuf(new char[size]);
    auto writeIter = &outDataBuf[0];
    auto es = field.write(writeIter, size);
    TS_ASSERT_EQUALS(es, expectedStatus);
    bool bufAsExpected = std::equal(expectedBuf, expectedBuf + size, &outDataBuf[0]);
    if (!bufAsExpected) {
        std::cout << "Expected buffer: " << std::hex;
        std::copy_n(expectedBuf, size, std::ostream_iterator<unsigned>(std::cout, " "));
        std::cout << "\nActual buffer: ";
        std::copy_n(&outDataBuf[0], size, std::ostream_iterator<unsigned>(std::cout, " "));
        std::cout << std::dec << std::endl;
    }
    TS_ASSERT(bufAsExpected);

    if (es == comms::ErrorStatus::Success) {
        auto readIter = &outDataBuf[0];
        typename std::decay<decltype(field)>::type newField;
        auto readEs = newField.read(readIter, size);
        TS_ASSERT_EQUALS(readEs, comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(field, newField);
    }
}
