//
// Copyright 2014 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstdint>
#include <cstddef>
#include <memory>
#include <iterator>

#include "cxxtest/TestSuite.h"
#include "CommsTestCommon.h"


class MessageTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();

private:

    template <typename TMessage>
    TMessage internalReadWriteTest(
        typename TMessage::ReadIterator const buf,
        std::size_t bufSize,
        comms::ErrorStatus expectedErrStatus = comms::ErrorStatus::Success);

    template <typename TMessage>
    void internalWriteReadTest(
        TMessage& msg,
        typename TMessage::WriteIterator const buf,
        std::size_t bufSize,
        comms::ErrorStatus expectedErrStatus = comms::ErrorStatus::Success);

    struct CommonTraits {
        typedef MessageType MsgIdType;
        typedef const std::uint8_t* ReadIterator;
        typedef std::uint8_t* WriteIterator;
    };

    struct BigEndianTraits : public CommonTraits
    {
        typedef comms::traits::endian::Big Endianness;
    };

    struct LittleEndianTraits : public CommonTraits
    {
        typedef comms::traits::endian::Little Endianness;
    };

    typedef
        comms::Message<
            comms::option::BigEndian,
            comms::option::MsgIdType<MessageType>
        > BeMessageBase;
    typedef
        comms::Message<
            comms::option::LittleEndian,
            comms::option::MsgIdType<MessageType>
        > LeMessageBase;

    typedef Message1<BeMessageBase> BeMsg1;
    typedef Message1<LeMessageBase> LeMsg1;

    typedef Message3<BeMessageBase> BeMsg3;
    typedef Message3<LeMessageBase> LeMsg3;
};

void MessageTestSuite::test1()
{
    static const std::uint8_t Buf[] = {
        0x01, 0x02
    };
    static const std::size_t BufSize =
        std::extent<decltype(Buf)>::value;

    auto beMsg = internalReadWriteTest<BeMsg1>(&Buf[0], BufSize);
    auto value = std::get<0>(beMsg.getFields()).getValue();
    TS_ASSERT_EQUALS(value, 0x0102);
    TS_ASSERT(beMsg.valid());

    auto leMsg = internalReadWriteTest<LeMsg1>(&Buf[0], BufSize);
    value = std::get<0>(leMsg.getFields()).getValue();
    TS_ASSERT_EQUALS(value, 0x0201);
    TS_ASSERT(leMsg.valid());
}

void MessageTestSuite::test2()
{
    static const std::uint8_t ExpectecedBeBuf[] = {
        0x01, 0x02
    };

    BeMsg1 beMsg;
    TS_ASSERT(beMsg.valid());
    std::get<0>(beMsg.getFields()).setValue(0x0102);
    std::uint8_t beBuf[2] = {0};
    static const std::size_t BeBufSize = std::extent<decltype(beBuf)>::value;
    internalWriteReadTest(beMsg, &beBuf[0], BeBufSize);
    TS_ASSERT(std::equal(&ExpectecedBeBuf[0], &ExpectecedBeBuf[0] + BeBufSize, &beBuf[0]));

    static const std::uint8_t ExpectecedLeBuf[] = {
        0x02, 0x01
    };

    LeMsg1 leMsg;
    std::get<0>(leMsg.getFields()).setValue(0x0102);
    TS_ASSERT(leMsg.valid());
    std::uint8_t leBuf[2] = {0};
    static const std::size_t LeBufSize = std::extent<decltype(leBuf)>::value;
    internalWriteReadTest(leMsg, leBuf, LeBufSize);
    TS_ASSERT(std::equal(&ExpectecedLeBuf[0], &ExpectecedLeBuf[0] + LeBufSize, &leBuf[0]));
}

void MessageTestSuite::test3()
{
    static const std::uint8_t Buf[] = {
        0x01
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    auto beMsg =
        internalReadWriteTest<BeMsg1>(
            Buf,
            BufSize,
            comms::ErrorStatus::NotEnoughData);

    auto leMsg =
        internalReadWriteTest<LeMsg1>(
            Buf,
            BufSize,
            comms::ErrorStatus::NotEnoughData);
}

void MessageTestSuite::test4()
{
    std::uint8_t buf[1] = {0};

    static const std::size_t BufSize = std::extent<decltype(buf)>::value;

    BeMsg1 beMsg;
    std::get<0>(beMsg.getFields()).setValue(0x0102);
    internalWriteReadTest(beMsg, buf, BufSize, comms::ErrorStatus::BufferOverflow);

    LeMsg1 leMsg;
    std::get<0>(leMsg.getFields()).setValue(0x0102);
    internalWriteReadTest(leMsg, buf, BufSize, comms::ErrorStatus::BufferOverflow);
}

void MessageTestSuite::test5()
{
    static const std::uint8_t Buf[] = {
        0x01, 0x02, 0x3, 0x4, (std::uint8_t)-5, 0xde, 0xad, 0x00, 0xaa, 0xff
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    BeMsg3 beMsg;
    TS_ASSERT(!beMsg.valid()); // there is invalid field
    beMsg = internalReadWriteTest<BeMsg3>(Buf, BufSize);

    TS_ASSERT_EQUALS(std::get<0>(beMsg.getFields()).getValue(), 0x01020304);
    TS_ASSERT_EQUALS(std::get<1>(beMsg.getFields()).getValue(), -5);
    TS_ASSERT_EQUALS(std::get<2>(beMsg.getFields()).getValue(), 0xdead);
    TS_ASSERT_EQUALS(std::get<3>(beMsg.getFields()).getValue(), 0xaaff);
    TS_ASSERT_EQUALS(beMsg.length(), 10);
    TS_ASSERT(beMsg.valid());

    LeMsg3 leMsg;
    TS_ASSERT(!leMsg.valid());
    leMsg = internalReadWriteTest<LeMsg3>(Buf, BufSize);

    TS_ASSERT_EQUALS(std::get<0>(leMsg.getFields()).getValue(), 0x04030201);
    TS_ASSERT_EQUALS(std::get<1>(leMsg.getFields()).getValue(), -5);
    TS_ASSERT_EQUALS(std::get<2>(leMsg.getFields()).getValue(), 0xadde);
    TS_ASSERT_EQUALS(std::get<3>(leMsg.getFields()).getValue(), 0xffaa00);
    TS_ASSERT_EQUALS(leMsg.length(), 10);
    TS_ASSERT(leMsg.valid());
}

void MessageTestSuite::test6()
{
    std::uint8_t buf[4] = {0};
    static const std::size_t BufSize = std::extent<decltype(buf)>::value;

    BeMsg3 beMsg;
    internalWriteReadTest(beMsg, buf, BufSize, comms::ErrorStatus::BufferOverflow);

    LeMsg3 leMsg;
    internalWriteReadTest(leMsg, buf, BufSize, comms::ErrorStatus::BufferOverflow);
}


template <typename TMessage>
TMessage MessageTestSuite::internalReadWriteTest(
    typename TMessage::ReadIterator const buf,
    std::size_t bufSize,
    comms::ErrorStatus expectedErrStatus)
{
    TMessage msg;

    auto readIter = buf;
    auto es = msg.read(readIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == comms::ErrorStatus::Success) {
        auto diff = static_cast<unsigned>(std::distance(buf, readIter));
        TS_ASSERT_LESS_THAN(0, diff);

        typedef typename TMessage::WriteIterator WriteIterator;
        typedef typename std::decay<decltype(*(std::declval<WriteIterator>()))>::type CharType;

        std::unique_ptr<CharType[]> outDataBuf(new CharType[diff]);
        auto writeIter = &outDataBuf[0];
        auto writeES = msg.write(writeIter, diff);
        TS_ASSERT_EQUALS(writeES, comms::ErrorStatus::Success);
        TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));
    }
    return msg;
}

template <typename TMessage>
void MessageTestSuite::internalWriteReadTest(
    TMessage& msg,
    typename TMessage::WriteIterator const buf,
    std::size_t bufSize,
    comms::ErrorStatus expectedErrStatus)
{
    auto writeIter = buf;
    auto es = msg.write(writeIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, writeIter));
        TMessage readMsg;
        auto readIter = static_cast<const std::uint8_t*>(buf);
        auto readES = readMsg.read(readIter, diff);
        TS_ASSERT_EQUALS(readES, comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(msg, readMsg);
    }
}

