//
// Copyright 2014 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "cxxtest/TestSuite.h"
#include "CommsTestCommon.h"

class MsgIdLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();

private:

    struct CommonTraits
    {
        typedef MessageType MsgIdType;
        typedef const char* ReadIterator;
        typedef char* WriteIterator;
    };

    struct BeTraits : public CommonTraits
    {
        typedef comms::traits::endian::Big Endianness;
    };

    struct LeTraits : public CommonTraits
    {
        typedef comms::traits::endian::Little Endianness;
    };

    typedef TestMessageBase<BeTraits> BeMsgBase;
    typedef TestMessageBase<LeTraits> LeMsgBase;

    typedef typename BeMsgBase::Field BeField;
    typedef typename LeMsgBase::Field LeField;

    typedef Message1<BeMsgBase> BeMsg1;
    typedef Message1<LeMsgBase> LeMsg1;
    typedef Message2<BeMsgBase> BeMsg2;
    typedef Message2<LeMsgBase> LeMsg2;
    typedef Message3<BeMsgBase> BeMsg3;
    typedef Message3<LeMsgBase> LeMsg3;


    template <typename TField>
    using Field1 =
        comms::field::BasicEnumValue<
            TField,
            MessageType,
            comms::field::option::LengthLimitImpl<1>
        >;

    template <typename TField>
    using Field2 =
        comms::field::BasicEnumValue<
            TField,
            MessageType,
            comms::field::option::LengthLimitImpl<2>
        >;

    template <typename TField>
    using Field3 =
        comms::field::BasicEnumValue<
            TField,
            MessageType,
            comms::field::option::LengthLimitImpl<3>
        >;

    typedef Field1<BeField> BeField1;
    typedef Field1<LeField> LeField1;
    typedef Field2<BeField> BeField2;
    typedef Field2<LeField> LeField2;
    typedef Field3<BeField> BeField3;
    typedef Field3<LeField> LeField3;

    template <typename TField, typename TMessage>
    using ProtocolStack =
        comms::protocol::MsgIdLayer<
            TField,
            AllMessages<TMessage>,
            comms::protocol::MsgDataLayer<TMessage>
        >;

    template <typename TField, typename TMessage>
    using InPlaceProtocolStack =
        comms::protocol::MsgIdLayer<
            TField,
            AllMessages<TMessage>,
            comms::protocol::MsgDataLayer<TMessage>,
            comms::protocol::option::InPlaceAllocation
        >;
};

void MsgIdLayerTestSuite::test1()
{
    static const char Buf[] = {
        MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    ProtocolStack<BeField1, BeMsgBase> stack;
    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.getFields()).getValue(), 0x0102);

    InPlaceProtocolStack<BeField1, BeMsgBase> inPlaceStack;
    auto msgPtr2 = commonReadWriteMsgTest(inPlaceStack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr2);
    TS_ASSERT_EQUALS(msgPtr2->getId(), MessageType1);
    auto& msg2 = dynamic_cast<BeMsg1&>(*msgPtr2);
    TS_ASSERT_EQUALS(std::get<0>(msg2.getFields()).getValue(), 0x0102);

    TS_ASSERT_EQUALS(msg1, msg2);

    auto msgPtr3 = commonReadWriteMsgTest(inPlaceStack, &Buf[0], BufSize, comms::ErrorStatus::MsgAllocFaulure);
    TS_ASSERT(!msgPtr3);
}

void MsgIdLayerTestSuite::test2()
{
    BeMsg1 msg;
    std::get<0>(msg.getFields()).setValue(0x0203);

    static const char ExpectedBuf[] = {
        0x0, MessageType1, 0x02, 0x03
    };

    static const std::size_t BufSize = std::extent<decltype(ExpectedBuf)>::value;

    char buf[BufSize] = {0};

    ProtocolStack<BeField2, BeMsgBase> stack;
    commonWriteReadMsgTest(stack, msg, buf, BufSize, &ExpectedBuf[0]);

    InPlaceProtocolStack<BeField2, BeMsgBase> inPlaceStack;
    commonWriteReadMsgTest(inPlaceStack, msg, buf, BufSize, &ExpectedBuf[0]);
}

void MsgIdLayerTestSuite::test3()
{
    static const char Buf[] = {
        MessageType2, 0, 0
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    ProtocolStack<LeField3, LeMsgBase> stack;

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType2);
    auto& msg1 = dynamic_cast<LeMsg2&>(*msgPtr);

    InPlaceProtocolStack<LeField3, LeMsgBase> inPlaceStack;
    auto msgPtr2 = commonReadWriteMsgTest(inPlaceStack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr2);
    TS_ASSERT_EQUALS(msgPtr2->getId(), MessageType2);
    auto& msg2 = dynamic_cast<LeMsg2&>(*msgPtr2);
    TS_ASSERT_EQUALS(msg1, msg2);

    auto msgPtr3 = commonReadWriteMsgTest(inPlaceStack, &Buf[0], BufSize, comms::ErrorStatus::MsgAllocFaulure);
    TS_ASSERT(!msgPtr3);
}


void MsgIdLayerTestSuite::test4()
{
    static const char Buf[] = {
        0x0, UnusedValue1, 0x00, 0x00
    };

    static const auto BufSize = std::extent<decltype(Buf)>::value;

    ProtocolStack<BeField2, BeMsgBase> stack;
    auto msgPtr = commonReadWriteMsgTest(stack, Buf, BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT(!msgPtr);

    InPlaceProtocolStack<BeField2, BeMsgBase> inPlaceStack;
    auto inPlaceMsgPtr = commonReadWriteMsgTest(inPlaceStack, Buf, BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT(!inPlaceMsgPtr);
}

void MsgIdLayerTestSuite::test5()
{
    BeMsg1 msg;
    std::get<0>(msg.getFields()).setValue(0x0203);

    char buf[2] = {0};
    static const auto BufSize = std::extent<decltype(buf)>::value;

    ProtocolStack<BeField3, BeMsgBase> stack;
    commonWriteReadMsgTest(stack, msg, buf, BufSize, nullptr, comms::ErrorStatus::BufferOverflow);

    InPlaceProtocolStack<BeField3, BeMsgBase> inPlaceStack;
    commonWriteReadMsgTest(inPlaceStack, msg, buf, BufSize, nullptr, comms::ErrorStatus::BufferOverflow);
}

